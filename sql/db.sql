-- MySQL Script generated by MySQL Workbench
-- Tue Feb 13 01:28:30 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema sistema_noleggio
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `sistema_noleggio` ;

-- -----------------------------------------------------
-- Schema sistema_noleggio
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sistema_noleggio` DEFAULT CHARACTER SET utf8 ;
USE `sistema_noleggio` ;

-- -----------------------------------------------------
-- Table `sistema_noleggio`.`impiegato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`impiegato` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`impiegato` (
  `codice_fiscale` CHAR(16) NOT NULL,
  `nome` VARCHAR(50) NOT NULL,
  `recapito` BIGINT(10) ZEROFILL NOT NULL,
  PRIMARY KEY (`codice_fiscale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`turno_lavoro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`turno_lavoro` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`turno_lavoro` (
  `impiegato` CHAR(16) NOT NULL,
  `data` DATE NOT NULL,
  `ora_inizio` TIME NOT NULL,
  `ora_fine` TIME NOT NULL,
  `ingresso` TIME NULL DEFAULT NULL,
  `uscita` TIME NULL DEFAULT NULL,
  PRIMARY KEY (`impiegato`, `data`),
  INDEX `report_ore_lavorate` (`impiegato`, `data`, `ingresso`, `uscita`),
  CONSTRAINT `fk_turno_lavoro_impiegato`
    FOREIGN KEY (`impiegato`)
    REFERENCES `sistema_noleggio`.`impiegato` (`codice_fiscale`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`carica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`carica` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`carica` (
  `impiegato` CHAR(16) NOT NULL,
  `inizio` DATE NOT NULL DEFAULT CURDATE(),
  `fine` DATE NULL DEFAULT NULL,
  `mansione` ENUM('Cassiere', 'Commesso') NOT NULL,
  PRIMARY KEY (`impiegato`, `inizio`),
  INDEX `modifica_carica_corrente` (`impiegato`, `inizio`, `fine`),
  CONSTRAINT `fk_carica_impiegato1`
    FOREIGN KEY (`impiegato`)
    REFERENCES `sistema_noleggio`.`impiegato` (`codice_fiscale`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`film` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`film` (
  `titolo` VARCHAR(100) NOT NULL,
  `regista` VARCHAR(50) NOT NULL,
  `anno` YEAR NOT NULL,
  `costo_dvd` FLOAT NOT NULL,
  `costo_videocassetta` FLOAT NOT NULL,
  `originale_titolo` VARCHAR(100) NULL,
  `originale_regista` VARCHAR(50) NULL,
  PRIMARY KEY (`titolo`, `regista`),
  INDEX `fk_film_film1_idx` (`originale_titolo` ASC, `originale_regista` ASC),
  CONSTRAINT `fk_film_film1`
    FOREIGN KEY (`originale_titolo` , `originale_regista`)
    REFERENCES `sistema_noleggio`.`film` (`titolo` , `regista`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`cast_film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`cast_film` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`cast_film` (
  `film_titolo` VARCHAR(100) NOT NULL,
  `film_regista` VARCHAR(50) NOT NULL,
  `attore_nome` VARCHAR(50) NOT NULL,
  `attore_cognome` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`),
  INDEX `fk_cast_film1_idx` (`film_titolo` ASC, `film_regista` ASC),
  CONSTRAINT `fk_cast_film1`
    FOREIGN KEY (`film_titolo` , `film_regista`)
    REFERENCES `sistema_noleggio`.`film` (`titolo` , `regista`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`settore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`settore` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`settore` (
  `codice` INT NOT NULL,
  PRIMARY KEY (`codice`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`copia_film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`copia_film` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`copia_film` (
  `codice` INT NOT NULL,
  `titolo` VARCHAR(100) NOT NULL,
  `regista` VARCHAR(50) NOT NULL,
  `tipo` ENUM('DVD', 'Videocassetta') NOT NULL,
  `settore` INT NOT NULL,
  `posizione` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`codice`),
  INDEX `fk_copia_film_settore1_idx` (`settore` ASC),
  CONSTRAINT `fk_copia_film_film1`
    FOREIGN KEY (`titolo` , `regista`)
    REFERENCES `sistema_noleggio`.`film` (`titolo` , `regista`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_copia_film_settore1`
    FOREIGN KEY (`settore`)
    REFERENCES `sistema_noleggio`.`settore` (`codice`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`cliente` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`cliente` (
  `tessera` INT NOT NULL AUTO_INCREMENT,
  `codice_fiscale` CHAR(16) NOT NULL,
  `nome` VARCHAR(50) NOT NULL,
  `cognome` VARCHAR(50) NOT NULL,
  `data_nascita` DATE NOT NULL,
  `indirizzo_via` VARCHAR(100) NOT NULL,
  `indirizzo_cap` INT(5) ZEROFILL NOT NULL,
  `indirizzo_civico` INT NOT NULL,
  PRIMARY KEY (`tessera`),
  UNIQUE INDEX `codice_fiscale_unique` (`codice_fiscale` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`noleggio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`noleggio` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`noleggio` (
  `copia_film` INT NOT NULL,
  `cliente` INT NOT NULL,
  `noleggio` DATE NOT NULL DEFAULT CURDATE(),
  `scadenza` DATE NOT NULL,
  `restituzione` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`copia_film`, `cliente`, `noleggio`),
  INDEX `fk_noleggio_cliente1_idx` (`cliente` ASC),
  INDEX `fk_noleggio_copia_film1_idx` (`copia_film` ASC),
  INDEX `ricerca_noleggio_restituzione` (`scadenza`, `restituzione`, `copia_film`, `cliente`),
  CONSTRAINT `fk_noleggio_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_noleggio_copia_film1`
    FOREIGN KEY (`copia_film`)
    REFERENCES `sistema_noleggio`.`copia_film` (`codice`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`telefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`telefono` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`telefono` (
  `cliente` INT NOT NULL,
  `telefono` BIGINT(10) ZEROFILL NOT NULL,
  PRIMARY KEY (`cliente`, `telefono`),
  INDEX `fk_telefono_cliente1_idx` (`cliente` ASC),
  CONSTRAINT `fk_telefono_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`email`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`email` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`email` (
  `cliente` INT NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`cliente`, `email`),
  INDEX `fk_email_cliente1_idx` (`cliente` ASC),
  CONSTRAINT `fk_email_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`cellulare`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`cellulare` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`cellulare` (
  `cliente` INT NOT NULL,
  `cellulare` BIGINT(10) ZEROFILL NOT NULL,
  PRIMARY KEY (`cliente`, `cellulare`),
  INDEX `fk_cellulare_cliente1_idx` (`cliente` ASC),
  CONSTRAINT `fk_cellulare_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`login` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`login` (
  `username` VARCHAR(100) NOT NULL,
  `password` CHAR(32) NOT NULL,
  `impiegato` CHAR(16) NULL,
  PRIMARY KEY (`username`),
  INDEX `fk_login_impiegato1_idx` (`impiegato` ASC),
  CONSTRAINT `fk_login_impiegato1`
    FOREIGN KEY (`impiegato`)
    REFERENCES `sistema_noleggio`.`impiegato` (`codice_fiscale`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `sistema_noleggio` ;

-- -----------------------------------------------------
-- procedure _inserisciRecapitiCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`_inserisciRecapitiCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `_inserisciRecapitiCliente` (in var_client INT, in var_mobile_phones TEXT, in var_emails TEXT, in var_phones TEXT, out var_affected_rows INT)
begin

    -- La variabile var_mobile_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri di cellulare del cliente
    -- La variabile var_emails contiene un elenco del tipo xxx@xx;xxx@xxx;....; -> indirizzi email del cliente
    -- La variabile var_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri fissi del cliente

    declare var_counter INT;
    declare var_aux TEXT;

    set var_affected_rows = 0;

    -- CELLULARE

    set var_counter = 1;
    insert_mobile_phones_loop: loop
        set var_aux = tokenize_string_list(var_mobile_phones, ';', var_counter);
        if var_aux = ''
        then
            leave insert_mobile_phones_loop;
        end if;
        INSERT INTO cellulare(cellulare, cliente) VALUES (var_aux, var_client);
        set var_affected_rows = var_affected_rows+1;
        set var_counter = var_counter+1;
    end loop;

    -- EMAIL

    set var_counter = 1;
    insert_emails_loop: loop
        set var_aux = tokenize_string_list(var_emails, ';', var_counter);
        if var_aux = ''
        then
            leave insert_emails_loop;
        end if;
        INSERT INTO email(email, cliente) VALUES (var_aux, var_client);
        set var_affected_rows = var_affected_rows+1;
        set var_counter = var_counter+1;
    end loop;

    -- TELEFONO

    set var_counter = 1;
    insert_phones_loop: loop
        set var_aux = tokenize_string_list(var_phones, ';', var_counter);
        if var_aux = ''
        then
            leave insert_phones_loop;
        end if;
        INSERT INTO telefono(telefono, cliente) VALUES (var_aux, var_client);
        set var_affected_rows = var_affected_rows+1;
        set var_counter = var_counter+1;
    end loop;

end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisciCopiaFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`inserisciCopiaFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `inserisciCopiaFilm` (in var_code INT, in var_title VARCHAR(100), in var_director VARCHAR(50), in var_type ENUM('DVD', 'Videocassetta'), in var_sector INT, in var_position VARCHAR(100))
begin
    INSERT INTO copia_film(codice, titolo, regista, tipo, settore, posizione) VALUES(var_code, var_title, var_director, var_type, var_sector, var_position);
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisciFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`inserisciFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `inserisciFilm` (in var_title VARCHAR(100), in var_director VARCHAR(50), in var_year YEAR, in var_price_dvd FLOAT, in var_price_videotape FLOAT, in var_original_title VARCHAR(100), in var_original_director VARCHAR(50),
                                  in var_names TEXT, in var_surnames TEXT)
begin

    -- La variabile var_names contiene un elenco del tipo xxx;xxx;....; -> nomi degli attori
    -- La variabile var_surnames contiene un elenco del tipo xxx;xxx;....; -> cognomi degli attori

    declare var_actor_name VARCHAR(50);
    declare var_actor_surname VARCHAR(50);
    declare var_counter INT;

    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level read uncommitted;

    start transaction;
    INSERT INTO film(titolo, regista, anno, costo_dvd, costo_videocassetta, originale_titolo, originale_regista) VALUES (var_title, var_director, var_year, var_price_dvd, var_price_videotape, var_original_title, var_original_director);

    set var_counter = 1;
    insert_loop: loop

        set var_actor_name = tokenize_string_list(var_names, ';', var_counter);
        set var_actor_surname = tokenize_string_list(var_surnames, ';', var_counter);
        if var_actor_name = '' or var_actor_surname = '' then
            leave insert_loop;
        end if;

        INSERT INTO cast_film(attore_nome, attore_cognome, film_titolo, film_regista) VALUES(var_actor_name, var_actor_surname, var_title, var_director);

        set var_counter = var_counter + 1;

    end loop;

    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisciRecapitiCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`inserisciRecapitiCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `inserisciRecapitiCliente` (in var_client INT, in var_mobile_phones TEXT, in var_emails TEXT, in var_phones TEXT)
begin

    -- La variabile var_mobile_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri di cellulare del cliente
    -- La variabile var_emails contiene un elenco del tipo xxx@xx;xxx@xxx;....; -> indirizzi email del cliente
    -- La variabile var_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri fissi del cliente

    declare var_affected_rows INT;

    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level read uncommitted;

    start transaction;
    call _inserisciRecapitiCliente(var_client, var_mobile_phones, var_emails, var_phones, var_affected_rows);
    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisciTurnoLavoro
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`inserisciTurnoLavoro`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `inserisciTurnoLavoro` (in var_employee CHAR(16), in var_month TINYINT(2), in var_year YEAR, in var_list_days VARCHAR(62), in var_list_hours VARCHAR(372))
begin

    -- La variabile var_list_days contiene un elenco del tipo 1;2;3;4;...; -> giorni a cui si riferiscono gli orari
    -- La variabile var_list_hours contiene un elenco del tipo 00:00-00:00;00:00-00:00;....; -> orari di inizio e fine turno

    declare var_counter INT;  -- Indice del loop
    declare var_day TINYINT(2); -- Contiene il numero del giorno da inserire
    declare var_hours CHAR(17); -- Contiene gli orari del tipo 00:00-00:00
    declare var_start_hour TIME; -- Contiene gli orari del tipo 00:00
    declare var_end_hour TIME; -- Contiene gli orari del tipo 00:00

    declare var_check TINYINT; -- Mantiene il controllo per capire se il turno di quel mese è stato già inserito o meno
    
    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level serializable;

    start transaction;

    /**
      * Il controllo viene eseguito all'interno della procedura e non attraverso un trigger poiché in questo modo lo statement di SELECT viene eseguito una sola volta
      * anziché per ogni riga inserita nella tabella.
      * Non si può sfruttare l'univocità della chiave primaria per eseguire il controllo poiché se viene inserito un turno in un mese compilato
      * ma in un giorno non presente tale giorno verrà inserito senza generare errori
      */
    SELECT count(*) FROM turno_lavoro WHERE extract(month from data) = var_month AND extract(year from data) = var_year AND impiegato = var_employee INTO var_check;
    if var_check > 0 then
        signal sqlstate '45000' set message_text = 'Turno di lavoro già presente';
    end if;

    set var_counter = 1;
    insert_loop: loop

        set var_hours = tokenize_string_list(var_list_hours, ';', var_counter);
        if var_hours = ''
        then
            leave insert_loop;
        end if;

        set var_day = tokenize_string_list(var_list_days, ';', var_counter);

        set var_start_hour = tokenize_string_list(var_hours, '-', 1);
        set var_end_hour = tokenize_string_list(var_hours, '-', 2);

        INSERT INTO turno_lavoro(impiegato, data, ora_inizio, ora_fine) VALUES (var_employee, CONCAT(var_year, '-', var_month, '-', var_day), var_start_hour, var_end_hour);

        set var_counter = var_counter+1;
    end loop;

    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaCariche
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaCariche`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaCariche` (in var_employee CHAR(16))
begin
    SELECT inizio, COALESCE(fine, 'corrente') as fine, mansione
    FROM carica
    WHERE impiegato = var_employee
    ORDER BY inizio DESC, fine DESC;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaClienti
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaClienti`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaClienti` ()
begin

    declare done bool default false;
    declare var_client INT;

    declare cur cursor for SELECT tessera FROM cliente ORDER BY tessera;
    declare continue handler for not found set done = true;

    set transaction isolation level serializable;

    start transaction read only;
        open cur;
        SELECT * FROM cliente ORDER BY tessera;

        read_loop: loop
            fetch cur into var_client;
            SELECT cellulare FROM cellulare WHERE cliente = var_client;
            SELECT email FROM email WHERE cliente = var_client;
            SELECT telefono FROM telefono WHERE cliente = var_client;
            if done then
                leave read_loop;
            end if;
        end loop;

    commit;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisciSettore
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`inserisciSettore`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `inserisciSettore` (in var_code INT)
begin
    INSERT INTO settore(codice) VALUES(var_code);
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaCopieFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaCopieFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaCopieFilm` ()
begin
    SELECT codice, titolo, regista, tipo, settore, posizione
    FROM copia_film;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaFilm` ()
begin

    declare done bool default false;
    declare var_title VARCHAR(100);
    declare var_director VARCHAR(50);

    declare cur cursor for SELECT titolo, regista FROM film ORDER BY titolo, regista;
    declare continue handler for not found set done = true;

    set transaction isolation level serializable;

    start transaction read only;
        open cur;
        SELECT * FROM film ORDER BY titolo, regista;
        read_loop: loop

            fetch cur into var_title, var_director;

            SELECT attore_nome as nome, attore_cognome as cognome
            FROM cast_film
            WHERE film_titolo = var_title AND film_regista = var_director;

            if done then
                leave read_loop;
            end if;
        end loop;
    commit;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaImpiegati
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaImpiegati`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaImpiegati` ()
begin
    SELECT codice_fiscale, nome, recapito, username, mansione
    FROM impiegato
        JOIN login ON login.impiegato = codice_fiscale
        JOIN carica_attuale ON codice_fiscale = carica_attuale.impiegato
    ORDER BY codice_fiscale;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaNoleggiCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaNoleggiCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaNoleggiCliente` (in var_client INT)
begin
    SELECT tessera, codice_fiscale, nome, cognome,
           codice, titolo, regista, tipo,
           noleggio, scadenza, restituzione
    FROM noleggio
        JOIN copia_film ON copia_film = codice
        JOIN cliente ON cliente = tessera
    WHERE cliente = var_client
    ORDER BY noleggio DESC, scadenza DESC, restituzione;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaNoleggiCopiaFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaNoleggiCopiaFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaNoleggiCopiaFilm` (in var_code INT)
begin
    SELECT tessera, codice_fiscale, nome, cognome,
           codice, titolo, regista, tipo,
           noleggio, scadenza, restituzione
    FROM noleggio
        JOIN copia_film ON copia_film = codice
        JOIN cliente ON cliente = tessera
    WHERE copia_film = var_code
    ORDER BY noleggio DESC, scadenza DESC, restituzione;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaNoleggiCorrenti
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaNoleggiCorrenti`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaNoleggiCorrenti` ()
begin
    SELECT tessera, codice_fiscale, nome, cognome,
           codice, titolo, regista, tipo,
           noleggio, scadenza, restituzione
    FROM noleggio_corrente
        JOIN copia_film ON copia_film = codice
        JOIN cliente ON cliente = tessera
    ORDER BY noleggio DESC, scadenza DESC, restituzione;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaNoleggiFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaNoleggiFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaNoleggiFilm` (in var_title VARCHAR(100), in var_director VARCHAR(50))
begin
    SELECT tessera, codice_fiscale, nome, cognome,
           codice, titolo, regista, tipo,
           noleggio, scadenza, restituzione
    FROM noleggio
        JOIN copia_film ON copia_film = codice
        JOIN cliente ON cliente = tessera
    WHERE titolo = var_title AND regista = var_director
    ORDER BY noleggio DESC, scadenza DESC, restituzione;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaNoleggiScaduti
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaNoleggiScaduti`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaNoleggiScaduti` ()
begin
    SELECT tessera, codice_fiscale, nome, cognome,
           codice, titolo, regista, tipo,
           noleggio, scadenza, restituzione
    FROM noleggio_scaduto
        JOIN copia_film ON copia_film = codice
        JOIN cliente ON cliente = tessera
    ORDER BY noleggio DESC, scadenza DESC, restituzione;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaSettori
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaSettori`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaSettori` ()
begin
    SELECT codice
    FROM settore;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listaTurni
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`listaTurni`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `listaTurni` (in var_employee CHAR(16), in var_month TINYINT(2), in var_year YEAR)
begin
    SELECT extract(day from data) as giorno, ora_inizio, ora_fine
    FROM turno_lavoro
    WHERE extract(month from data) = var_month AND extract(year from data) = var_year
    AND impiegato = var_employee
    ORDER BY data;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`login`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `login` (in var_username VARCHAR(100), in var_password VARCHAR(100), out var_role ENUM('Proprietario', 'Cassiere', 'Commesso'), out var_employee CHAR(16))
begin
    declare var_check_username VARCHAR(100);
    declare var_current_role ENUM('Cassiere', 'Commesso');

    SELECT username, login.impiegato, mansione
    FROM login
        LEFT JOIN carica_attuale ON login.impiegato = carica_attuale.impiegato
    WHERE username = var_username AND password = MD5(var_password) INTO var_check_username, var_employee, var_role;

	if var_check_username is null then
        signal sqlstate '45000' set message_text = 'Credenziali errate';
    end if;

    if var_employee is null then
		set var_role = 'Proprietario';
    end if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modificaCarica
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`modificaCarica`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `modificaCarica` (in var_employee CHAR(16), in var_end_date DATE, in var_role ENUM('Cassiere', 'Commesso'))
begin

    declare var_start_date DATE;
    declare var_current_role ENUM('Cassiere', 'Commesso');

    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level serializable;

    set var_start_date = var_end_date + INTERVAL 1 day;

    start transaction;
    SELECT mansione FROM carica WHERE impiegato = var_employee AND fine IS NULL INTO var_current_role;
    if var_current_role = var_role
    then
        signal sqlstate '45000' set message_text = 'La nuova mansione deve essere differente da quella precedente';
    end if;

    UPDATE carica SET fine = var_end_date WHERE impiegato = var_employee AND fine IS NULL;
    INSERT INTO carica(impiegato, inizio, mansione) VALUES(var_employee, var_start_date, var_role);
    commit;
    set autocommit=1;

end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registraCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`registraCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `registraCliente` (in var_cf CHAR(16), in var_name VARCHAR(50), in var_surname VARCHAR(50), in var_birth_date DATE, in var_address VARCHAR(100), in var_cap INT(5), in var_number INT,
                                    in var_mobile_phones TEXT, in var_emails TEXT, in var_phones TEXT, out var_card INT)
begin

    declare var_affected_rows INT; -- Contiene i recapiti inseriti per il cliente

    -- La variabile var_mobile_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri di cellulare del cliente
    -- La variabile var_emails contiene un elenco del tipo xxx@xx;xxx@xxx;....; -> indirizzi email del cliente
    -- La variabile var_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri fissi del cliente
    
    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level read uncommitted;

    start transaction;
    INSERT INTO cliente(tessera, codice_fiscale, nome, cognome, data_nascita, indirizzo_via, indirizzo_cap, indirizzo_civico) VALUES (NULL, var_cf, var_name, var_surname, var_birth_date, var_address, var_cap, var_number);
    set var_card = last_insert_id();
    call _inserisciRecapitiCliente(var_card, var_mobile_phones, var_emails, var_phones, var_affected_rows);
    if var_affected_rows <= 0 then
        signal sqlstate '45000' set message_text = 'Il cliente deve avere almeno un recapito';
    end if;
    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registraImpiegato
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`registraImpiegato`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `registraImpiegato` (in var_username VARCHAR(100), in var_password VARCHAR(100), in var_role ENUM('Cassiere', 'Commesso'), in var_start_date DATE, in var_cf CHAR(16), in var_name VARCHAR(50), in var_phone BIGINT(10))
begin

    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level read uncommitted;
    start transaction;
    INSERT INTO impiegato(codice_fiscale, nome, recapito) VALUES (var_cf, var_name, var_phone);
    INSERT INTO carica(impiegato, inizio,  mansione) VALUES (var_cf, var_start_date, var_role);
    INSERT INTO login (username, password, impiegato) VALUES (var_username, MD5(var_password), var_cf);
    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registraNoleggio
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`registraNoleggio`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `registraNoleggio` (in var_copy INT, in var_client INT, in var_expiration_date DATE)
begin
    INSERT INTO noleggio(copia_film, cliente, scadenza) VALUES (var_copy, var_client, var_expiration_date);
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registraRestituzione
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`registraRestituzione`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `registraRestituzione` (in var_copy INT, in var_client INT)
begin
    declare var_affected_rows TINYINT;
    UPDATE noleggio_corrente SET restituzione = CURDATE() WHERE copia_film = var_copy AND cliente = var_client;
    SELECT ROW_COUNT() INTO var_affected_rows;
    if var_affected_rows <= 0 then
        signal sqlstate '45000' set message_text = 'Nessun noleggio collegato';
    end if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reportAnnuale
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`reportAnnuale`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `reportAnnuale` (in var_year YEAR)
begin
    SELECT nome, extract(month from data) as mese, SEC_TO_TIME(SUM(TIME_TO_SEC(TIMEDIFF(uscita, ingresso)))) as ore_lavorate
    FROM turno_terminato
        JOIN impiegato ON codice_fiscale = impiegato
    WHERE extract(year from data) = var_year
    GROUP BY impiegato, extract(month from data)
    ORDER BY nome, mese;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reportMensile
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`reportMensile`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `reportMensile` (in var_month TINYINT(2), in var_year YEAR)
begin
    SELECT nome, data, TIMEDIFF(uscita, ingresso) as ore_lavorate
    FROM turno_terminato
        JOIN impiegato ON codice_fiscale = impiegato
    WHERE extract(month from data) = var_month AND extract(year from data) = var_year
    ORDER BY nome, data;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviCliente` (in var_card INT)
begin
    DELETE FROM cliente WHERE tessera = var_card;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviCopiaFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviCopiaFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviCopiaFilm` (in var_code INT)
begin
    DELETE FROM copia_film WHERE codice = var_code;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviFilm` (in var_title VARCHAR(100), in var_director VARCHAR(100))
begin
    DELETE FROM film WHERE titolo = var_title AND regista = var_director;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviImpiegato
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviImpiegato`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviImpiegato` (in var_cf CHAR(16))
begin
    DELETE FROM impiegato WHERE codice_fiscale = var_cf;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviRecapitiCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviRecapitiCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviRecapitiCliente` (in var_client INT, in var_mobile_phones TEXT, in var_emails TEXT, in var_phones TEXT)
begin

    -- La variabile var_mobile_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri di cellulare del cliente
    -- La variabile var_emails contiene un elenco del tipo xxx@xx;xxx@xxx;....; -> indirizzi email del cliente
    -- La variabile var_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri fissi del cliente

    declare var_counter INT;
    declare var_aux TEXT;

    declare var_count_mobile_phones INT;
    declare var_count_emails INT;
    declare var_count_phones INT;

    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level serializable;

    start transaction;

    -- CELLULARE

    set var_counter = 1;
    remove_mobile_phones_loop: loop
        set var_aux = tokenize_string_list(var_mobile_phones, ';', var_counter);
        if var_aux = ''
        then
            leave remove_mobile_phones_loop;
        end if;
        DELETE FROM cellulare WHERE cellulare = var_aux AND cliente = var_client;
        set var_counter = var_counter+1;
    end loop;

    -- EMAIL

    set var_counter = 1;
    remove_emails_loop: loop
        set var_aux = tokenize_string_list(var_emails, ';', var_counter);
        if var_aux = ''
        then
            leave remove_emails_loop;
        end if;
        DELETE FROM email WHERE email = var_aux AND cliente = var_client;
        set var_counter = var_counter+1;
    end loop;

    -- TELEFONO

    set var_counter = 1;
    remove_phones_loop: loop
        set var_aux = tokenize_string_list(var_phones, ';', var_counter);
        if var_aux = ''
        then
            leave remove_phones_loop;
        end if;
        DELETE FROM telefono WHERE telefono = var_aux AND cliente = var_client;
        set var_counter = var_counter+1;
    end loop;

    SELECT count(*) FROM cellulare WHERE cliente = var_client INTO var_count_mobile_phones;
    SELECT count(*) FROM email WHERE cliente = var_client INTO var_count_emails;
    SELECT count(*) FROM telefono WHERE cliente = var_client INTO var_count_phones;

    if var_count_mobile_phones <= 0 and var_count_emails <= 0 and var_count_phones <= 0 then
        signal sqlstate '45000' set message_text = 'Il cliente deve avere almeno un recapito';
    end if;

    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviSettore
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviSettore`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviSettore` (in var_code INT)
begin
    DELETE FROM settore WHERE codice = var_code;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rimuoviTurnoLavoro
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`rimuoviTurnoLavoro`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `rimuoviTurnoLavoro` (in var_employee CHAR(16), in var_month TINYINT(2), in var_year YEAR)
begin

    declare var_check TINYINT; -- Mantiene il controllo per capire se il turno di quel mese è stato già iniziato o meno

    declare exit handler for sqlexception
        begin
            rollback;
            set autocommit=1;
            resignal;
        end;

    set autocommit=0;
    set transaction isolation level repeatable read;

    start transaction;

    SELECT count(*) FROM turno_iniziato WHERE extract(month from data) = var_month AND extract(year from data) = var_year AND impiegato = var_employee INTO var_check;
    if var_check > 0 then
        signal sqlstate '45000' set message_text = 'Turni di lavoro già iniziati';
    end if;

    SELECT count(*) FROM turno_terminato WHERE extract(month from data) = var_month AND extract(year from data) = var_year AND impiegato = var_employee INTO var_check;
    if var_check > 0 then
        signal sqlstate '45000' set message_text = 'Turni di lavoro già terminati';
    end if;

    DELETE FROM turno_lavoro WHERE extract(month from data) = var_month AND extract(year from data) = var_year AND impiegato = var_employee;

    commit;
    set autocommit=1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure timbra
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`timbra`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `timbra` (in var_employee CHAR(16))
begin

    declare var_started_job TINYINT;
    declare var_affected_row INT;

    declare exit handler for sqlexception
    begin
        rollback;
        set autocommit=1;
        resignal;
    end;

    set autocommit=0;
    set transaction isolation level repeatable read;


    start transaction;

    SELECT count(*) FROM turno_iniziato WHERE impiegato = var_employee AND data = CURDATE() INTO var_started_job;

    if not var_started_job
    then

    -- TIMBRATURA IN INGRESSO
    UPDATE turno_lavoro SET ingresso = CURTIME() WHERE impiegato = var_employee AND data = CURDATE();
    SELECT ROW_COUNT() INTO var_affected_row;
    if var_affected_row <= 0 then
        signal sqlstate '45000' set message_text = 'Non c\'è nessun turno di lavoro per oggi';
    end if;

    else

    -- TIMBRATURA IN USCITA
    UPDATE turno_lavoro SET uscita = CURTIME() WHERE impiegato = var_employee AND data = CURDATE();
    SELECT ROW_COUNT() INTO var_affected_row;
    if var_affected_row <= 0 then
        signal sqlstate '45000' set message_text = 'Non c\'è nessun turno di lavoro per oggi';
    end if;

    end if;
    commit;
    set autocommit=1;

end$$

DELIMITER ;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`carica_attuale`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`carica_attuale` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `carica_attuale` AS
SELECT * FROM carica WHERE (fine IS NULL AND CURDATE() >= inizio) OR (CURDATE() BETWEEN inizio AND fine);

-- -----------------------------------------------------
-- View `sistema_noleggio`.`turno_iniziato`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`turno_iniziato` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `turno_iniziato` AS
SELECT * FROM turno_lavoro WHERE ingresso IS NOT NULL AND uscita IS NULL;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`turno_terminato`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`turno_terminato` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `turno_terminato` AS
SELECT * FROM turno_lavoro WHERE uscita IS NOT NULL;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`noleggio_corrente`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`noleggio_corrente` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `noleggio_corrente` AS
SELECT * FROM noleggio WHERE restituzione IS NULL;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`noleggio_scaduto`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`noleggio_scaduto` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `noleggio_scaduto` AS
SELECT * FROM noleggio_corrente WHERE scadenza <= CURDATE();
SET SQL_MODE = '';
DROP USER IF EXISTS sn_cassiere;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_cassiere' IDENTIFIED BY 'noleggio_cassiere';

GRANT EXECUTE ON procedure `sistema_noleggio`.`timbra` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`registraCliente` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaClienti` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviCliente` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`inserisciRecapitiCliente` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviRecapitiCliente` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`registraRestituzione` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaNoleggiCorrenti` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaNoleggiScaduti` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaNoleggiCopiaFilm` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaNoleggiCliente` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaNoleggiFilm` TO 'sn_cassiere';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaTurni` TO 'sn_cassiere';
SET SQL_MODE = '';
DROP USER IF EXISTS sn_proprietario;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_proprietario' IDENTIFIED BY 'sn_proprietario';

GRANT EXECUTE ON procedure `sistema_noleggio`.`inserisciCopiaFilm` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`registraImpiegato` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaImpiegati` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviImpiegato` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`modificaCarica` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaCariche` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`inserisciTurnoLavoro` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaTurni` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviTurnoLavoro` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`reportMensile` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`reportAnnuale` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`inserisciFilm` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaFilm` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviFilm` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`inserisciSettore` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaSettori` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviSettore` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaCopieFilm` TO 'sn_proprietario';
GRANT EXECUTE ON procedure `sistema_noleggio`.`rimuoviCopiaFilm` TO 'sn_proprietario';
SET SQL_MODE = '';
DROP USER IF EXISTS sn_impiegato;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_impiegato' IDENTIFIED BY 'noleggio_impiegato';

GRANT EXECUTE ON procedure `sistema_noleggio`.`timbra` TO 'sn_impiegato';
GRANT EXECUTE ON procedure `sistema_noleggio`.`listaTurni` TO 'sn_impiegato';
SET SQL_MODE = '';
DROP USER IF EXISTS sn_login;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_login' IDENTIFIED BY 'noleggio_login';

GRANT EXECUTE ON procedure `sistema_noleggio`.`login` TO 'sn_login';

-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`impiegato`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`impiegato` (`codice_fiscale`, `nome`, `recapito`) VALUES ('CRBRRD15L41B205E', 'Francesco', 3361132678);
INSERT INTO `sistema_noleggio`.`impiegato` (`codice_fiscale`, `nome`, `recapito`) VALUES ('CRNDYN01T01F109U', 'Giacomo', 5577328403);
INSERT INTO `sistema_noleggio`.`impiegato` (`codice_fiscale`, `nome`, `recapito`) VALUES ('DMITST78B01C336K', 'Sandra', 6142818410);
INSERT INTO `sistema_noleggio`.`impiegato` (`codice_fiscale`, `nome`, `recapito`) VALUES ('DPTFWZ64D41C241Z', 'Giulia', 9981835701);
INSERT INTO `sistema_noleggio`.`impiegato` (`codice_fiscale`, `nome`, `recapito`) VALUES ('LVTHMD02M41G196S', 'Fabio', 7756350007);
INSERT INTO `sistema_noleggio`.`impiegato` (`codice_fiscale`, `nome`, `recapito`) VALUES ('RTZVLL21E41E664J', 'Mario', 2716344141);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`turno_lavoro`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-01', '09:00:00', '18:00:00', '08:53:40', '18:54:15');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-02', '09:00:00', '18:00:00', '09:01:23', '18:24:53');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-03', '09:00:00', '18:00:00', '08:59:50', '18:31:03');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-04', '09:00:00', '18:00:00', '08:45:26', '18:01:46');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-05', '09:00:00', '18:00:00', '08:57:12', '18:17:03');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-06', '09:00:00', '18:00:00', '08:33:08', '17:56:03');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-11', '09:00:00', '18:00:00', '08:51:58', '17:41:54');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-12', '09:00:00', '18:00:00', '08:59:31', '18:06:40');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-01-13', '09:00:00', '18:00:00', '08:40:19', '18:00:39');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-13', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-14', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-15', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-16', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-17', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-18', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-19', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-20', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-21', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-22', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-23', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-24', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-25', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-26', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-27', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-28', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRBRRD15L41B205E', '2024-02-29', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-01', '09:00:00', '18:00:00', '08:58:57', '18:10:27');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-02', '09:00:00', '18:00:00', '09:00:22', '18:25:11');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-03', '09:00:00', '18:00:00', '09:25:59', '18:15:04');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-04', '09:00:00', '18:00:00', '09:01:38', '18:38:33');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-05', '09:00:00', '18:00:00', '09:00:45', '18:45:50');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-06', '09:00:00', '18:00:00', '08:56:21', '18:20:15');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-07', '09:00:00', '18:00:00', '09:07:33', '18:30:59');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-11', '09:00:00', '18:00:00', '08:59:33', '18:12:42');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-12', '09:00:00', '18:00:00', '09:15:04', '18:05:21');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-13', '09:00:00', '18:00:00', '08:52:11', '18:22:33');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-14', '09:00:00', '18:00:00', '08:45:27', '18:17:48');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-01-15', '09:00:00', '18:00:00', '09:20:50', '18:10:27');
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-13', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-14', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-15', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-16', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-17', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-18', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-19', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-20', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-21', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-22', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-23', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-24', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-25', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-26', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-27', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-28', '09:00:00', '18:00:00', NULL, NULL);
INSERT INTO `sistema_noleggio`.`turno_lavoro` (`impiegato`, `data`, `ora_inizio`, `ora_fine`, `ingresso`, `uscita`) VALUES ('CRNDYN01T01F109U', '2024-02-29', '09:00:00', '18:00:00', NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`carica`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('CRBRRD15L41B205E', '2020-01-01', NULL, 'Cassiere');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('CRNDYN01T01F109U', '2007-08-24', NULL, 'Cassiere');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('DMITST78B01C336K', '2009-04-05', NULL, 'Commesso');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('DPTFWZ64D41C241Z', '2001-04-20', '2003-02-24', 'Commesso');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('DPTFWZ64D41C241Z', '2003-02-25', '2015-05-23', 'Cassiere');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('DPTFWZ64D41C241Z', '2015-05-24', NULL, 'Commesso');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('LVTHMD02M41G196S', '2005-06-12', NULL, 'Commesso');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('RTZVLL21E41E664J', '2020-05-01', '2022-11-13', 'Commesso');
INSERT INTO `sistema_noleggio`.`carica` (`impiegato`, `inizio`, `fine`, `mansione`) VALUES ('RTZVLL21E41E664J', '2022-11-14', NULL, 'Cassiere');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`film`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Ben-Hur', 'Fred Niblo', 1925, 3.49, 2.49, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Ben-Hur', 'William Wyler', 1959, 3.49, 2.49, 'Ben-Hur', 'Fred Niblo');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Cape Fear', 'J. Lee Thompson', 1962, 3.89, 2.89, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Cape Fear', 'Martin Scorsese', 1991, 3.89, 2.89, 'Cape Fear', 'J. Lee Thompson');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Fight Club', 'David Fincher', 1999, 3.69, 2.69, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Forrest Gump', 'Robert Zemeckis', 1994, 2.99, 3.99, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Il Padrino', 'Francis Ford Coppola', 1972, 3.49, 2.49, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Inception', 'Christopher Nolan', 2010, 4.19, 3.19, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Interstellar', 'Christopher Nolan', 2014, 4.29, 3.29, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('King Kong', 'Merian C. Cooper, Ernest B. Schoedsack', 1933, 2.99, 2.99, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('King Kong', 'Peter Jackson', 2005, 3.99, 2.99, 'King Kong', 'Merian C. Cooper, Ernest B. Schoedsack');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('La vita Ã¨ bella', 'Roberto Benigni', 1997, 3.59, 2.59, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Ocean\'s Eleven', 'Lewis Milestone', 1960, 3.49, 2.49, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Ocean\'s Eleven', 'Steven Soderbergh', 2001, 3.49, 2.49, 'Ocean\'s Eleven', 'Lewis Milestone');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Pulp Fiction', 'Quentin Tarantino', 1994, 3.79, 2.79, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Scarface', 'Brian De Palma', 1983, 3.59, 2.59, 'Scarface', 'Howard Hawks, Richard Rosson');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Scarface', 'Howard Hawks, Richard Rosson', 1932, 2.59, 2.59, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('Schindler\'s List', 'Steven Spielberg', 1993, 3.69, 2.69, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Departed', 'Andrew Lau, Alan Mak', 2002, 3.69, 2.69, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Departed', 'Martin Scorsese', 2006, 3.69, 2.69, 'The Departed', 'Andrew Lau, Alan Mak');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Fly', 'David Cronenberg', 1986, 4.19, 3.19, 'The Fly', 'Kurt Neumann');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Fly', 'Kurt Neumann', 1958, 4.19, 3.19, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Godfather: Part II', 'Francis Ford Coppola', 1974, 3.49, 2.49, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Italian Job', 'F. Gary Gray', 2003, 3.79, 2.79, 'The Italian Job', 'Peter Collinson');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Italian Job', 'Peter Collinson', 1969, 2.79, 2.79, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Shawshank Redemption', 'Frank Darabont', 1994, 3.89, 2.89, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Thing', 'John Carpenter', 1982, 3.69, 2.69, 'The Thing from Another World', 'Christian Nyby, Howard Hawks');
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('The Thing from Another World', 'Christian Nyby, Howard Hawks', 1951, 3.69, 2.69, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('True Grit', 'Henry Hathaway', 1969, 3.29, 3.29, NULL, NULL);
INSERT INTO `sistema_noleggio`.`film` (`titolo`, `regista`, `anno`, `costo_dvd`, `costo_videocassetta`, `originale_titolo`, `originale_regista`) VALUES ('True Grit', 'Joel and Ethan Coen', 2010, 4.29, 3.29, 'True Grit', 'Henry Hathaway');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`cast_film`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ben-Hur', 'Fred Niblo', 'Francis', 'X. Bushman');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ben-Hur', 'Fred Niblo', 'Ramon', 'Novarro');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ben-Hur', 'William Wyler', 'Charlton', 'Heston');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ben-Hur', 'William Wyler', 'Jack', 'Hawkins');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Cape Fear', 'J. Lee Thompson', 'Gregory', 'Peck');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Cape Fear', 'J. Lee Thompson', 'Robert', 'Mitchum');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Cape Fear', 'Martin Scorsese', 'Nick', 'Nolte');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Cape Fear', 'Martin Scorsese', 'Robert', 'De Niro');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Fight Club', 'David Fincher', 'Brad', 'Pitt');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Fight Club', 'David Fincher', 'Edward', 'Norton');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Forrest Gump', 'Robert Zemeckis', 'Robin', 'Wright');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Forrest Gump', 'Robert Zemeckis', 'Tom', 'Hanks');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Il Padrino', 'Francis Ford Coppola', 'Al', 'Pacino');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Il Padrino', 'Francis Ford Coppola', 'Marlon', 'Brando');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Inception', 'Christopher Nolan', 'Joseph', 'Gordon-Levitt');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Inception', 'Christopher Nolan', 'Leonardo', 'DiCaprio');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Interstellar', 'Christopher Nolan', 'Anne', 'Hathaway');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Interstellar', 'Christopher Nolan', 'Matthew', 'McConaughey');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('King Kong', 'Merian C. Cooper, Ernest B. Schoedsack', 'Fay', 'Wray');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('King Kong', 'Merian C. Cooper, Ernest B. Schoedsack', 'Robert', 'Armstrong');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('King Kong', 'Peter Jackson', 'Jack', 'Black');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('King Kong', 'Peter Jackson', 'Naomi', 'Watts');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('La vita Ã¨ bella', 'Roberto Benigni', 'Nicoletta', 'Braschi');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('La vita Ã¨ bella', 'Roberto Benigni', 'Roberto', 'Benigni');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ocean\'s Eleven', 'Lewis Milestone', 'Dean', 'Martin');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ocean\'s Eleven', 'Lewis Milestone', 'Frank', 'Sinatra');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ocean\'s Eleven', 'Steven Soderbergh', 'Brad', 'Pitt');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Ocean\'s Eleven', 'Steven Soderbergh', 'George', 'Clooney');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Pulp Fiction', 'Quentin Tarantino', 'John', 'Travolta');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Pulp Fiction', 'Quentin Tarantino', 'Uma', 'Thurman');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Scarface', 'Brian De Palma', 'Al', 'Pacino');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Scarface', 'Brian De Palma', 'Michelle', 'Pfeiffer');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Scarface', 'Howard Hawks, Richard Rosson', 'Ann', 'Dvorak');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Scarface', 'Howard Hawks, Richard Rosson', 'Paul', 'Muni');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Schindler\'s List', 'Steven Spielberg', 'Ben', 'Kingsley');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('Schindler\'s List', 'Steven Spielberg', 'Liam', 'Neeson');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Departed', 'Andrew Lau, Alan Mak', 'Andy', 'Lau');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Departed', 'Andrew Lau, Alan Mak', 'Tony', 'Leung');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Departed', 'Martin Scorsese', 'Leonardo', 'DiCaprio');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Departed', 'Martin Scorsese', 'Matt', 'Damon');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Fly', 'David Cronenberg', 'Geena', 'Davis');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Fly', 'David Cronenberg', 'Jeff', 'Goldblum');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Fly', 'Kurt Neumann', 'David', 'Hedison');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Fly', 'Kurt Neumann', 'Vincent', 'Price');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Godfather: Part II', 'Francis Ford Coppola', 'Al', 'Pacino');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Godfather: Part II', 'Francis Ford Coppola', 'Robert', 'De Niro');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Italian Job', 'F. Gary Gray', 'Charlize', 'Theron');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Italian Job', 'F. Gary Gray', 'Mark', 'Wahlberg');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Italian Job', 'Peter Collinson', 'Michael', 'Caine');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Italian Job', 'Peter Collinson', 'Noel', 'Coward');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Shawshank Redemption', 'Frank Darabont', 'Morgan', 'Freeman');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Shawshank Redemption', 'Frank Darabont', 'Tim', 'Robbins');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Thing', 'John Carpenter', 'Kurt', 'Russell');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Thing', 'John Carpenter', 'Wilford', 'Brimley');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Thing from Another World', 'Christian Nyby, Howard Hawks', 'Kenneth', 'Tobey');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('The Thing from Another World', 'Christian Nyby, Howard Hawks', 'Margaret', 'Sheridan');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('True Grit', 'Henry Hathaway', 'Glen', 'Campbell');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('True Grit', 'Henry Hathaway', 'John', 'Wayne');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('True Grit', 'Joel and Ethan Coen', 'Hailee', 'Steinfeld');
INSERT INTO `sistema_noleggio`.`cast_film` (`film_titolo`, `film_regista`, `attore_nome`, `attore_cognome`) VALUES ('True Grit', 'Joel and Ethan Coen', 'Jeff', 'Bridges');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`settore`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (1);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (2);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (3);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (4);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (5);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (6);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (7);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (8);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (9);
INSERT INTO `sistema_noleggio`.`settore` (`codice`) VALUES (10);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`copia_film`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (1, 'Forrest Gump', 'Robert Zemeckis', 'DVD', 7, 'A1');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (2, 'Forrest Gump', 'Robert Zemeckis', 'DVD', 7, 'A2');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (3, 'Forrest Gump', 'Robert Zemeckis', 'Videocassetta', 7, 'A3');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (4, 'Forrest Gump', 'Robert Zemeckis', 'DVD', 7, 'A4');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (5, 'Forrest Gump', 'Robert Zemeckis', 'Videocassetta', 7, 'A5');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (6, 'Il Padrino', 'Francis Ford Coppola', 'DVD', 3, 'C2');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (7, 'Il Padrino', 'Francis Ford Coppola', 'DVD', 3, 'C3');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (8, 'Il Padrino', 'Francis Ford Coppola', 'Videocassetta', 3, 'C4');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (9, 'Il Padrino', 'Francis Ford Coppola', 'Videocassetta', 3, 'C5');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (10, 'Il Padrino', 'Francis Ford Coppola', 'DVD', 3, 'C6');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (11, 'Pulp Fiction', 'Quentin Tarantino', 'Videocassetta', 10, 'E7');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (12, 'Pulp Fiction', 'Quentin Tarantino', 'DVD', 10, 'E8');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (13, 'Pulp Fiction', 'Quentin Tarantino', 'DVD', 10, 'E9');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (14, 'Pulp Fiction', 'Quentin Tarantino', 'Videocassetta', 10, 'E10');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (15, 'Pulp Fiction', 'Quentin Tarantino', 'DVD', 10, 'E11');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (16, 'Interstellar', 'Christopher Nolan', 'DVD', 2, 'G9');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (17, 'Interstellar', 'Christopher Nolan', 'DVD', 2, 'G10');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (18, 'Interstellar', 'Christopher Nolan', 'Videocassetta', 2, 'G11');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (19, 'Interstellar', 'Christopher Nolan', 'DVD', 2, 'G12');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (20, 'Interstellar', 'Christopher Nolan', 'DVD', 2, 'G13');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (21, 'La vita Ã¨ bella', 'Roberto Benigni', 'DVD', 9, 'I3');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (22, 'La vita Ã¨ bella', 'Roberto Benigni', 'DVD', 9, 'I4');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (23, 'La vita Ã¨ bella', 'Roberto Benigni', 'Videocassetta', 9, 'I5');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (24, 'La vita Ã¨ bella', 'Roberto Benigni', 'DVD', 9, 'I6');
INSERT INTO `sistema_noleggio`.`copia_film` (`codice`, `titolo`, `regista`, `tipo`, `settore`, `posizione`) VALUES (25, 'La vita Ã¨ bella', 'Roberto Benigni', 'Videocassetta', 9, 'I7');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`cliente`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (1, 'RSSMRA85E10A001Q', 'Mario', 'Rossi', '1985-05-10', 'Via Roma', 123, 12);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (2, 'BNCGPP90T15C351F', 'Luca', 'Bianchi', '1990-12-15', 'Via Garibaldi', 234, 25);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (3, 'VRDGLI88M20D612S', 'Giulia', 'Verdi', '1988-08-20', 'Via Dante', 345, 6);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (4, 'FNCMRA89R10A001D', 'Giovanni', 'Ferrari', '1989-03-05', 'Via Milano', 456, 8);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (5, 'PNNMRO95E15B002Z', 'Anna', 'Neri', '1995-09-20', 'Corso Vittorio Emanuele', 567, 15);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (6, 'SLLVTR91P05C345L', 'Laura', 'Silvestri', '1991-06-30', 'Via Garibaldi', 678, 18);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (7, 'BRCGPP87H25D513Q', 'Marco', 'Bianchini', '1987-11-12', 'Via Napoli', 789, 27);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (8, 'LSVMRO92S12A400D', 'Simone', 'Levati', '1992-04-18', 'Via Roma', 890, 5);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (9, 'SMNCPP94T08B234E', 'Giorgio', 'Simonetti', '1994-07-25', 'Via Venezia', 901, 9);
INSERT INTO `sistema_noleggio`.`cliente` (`tessera`, `codice_fiscale`, `nome`, `cognome`, `data_nascita`, `indirizzo_via`, `indirizzo_cap`, `indirizzo_civico`) VALUES (10, 'LRSNCE93R24C189G', 'Roberta', 'Lorusso', '1993-11-29', 'Via Verdi', 1012, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`noleggio`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (1, 2, '2024-01-01', '2024-01-08', '2024-01-06');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (5, 3, '2024-01-03', '2024-01-10', '2024-01-08');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (4, 6, '2024-01-05', '2024-01-12', '2024-01-10');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (3, 9, '2024-01-07', '2024-01-14', '2024-01-12');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (1, 10, '2024-01-09', '2024-01-16', '2024-01-18');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (2, 7, '2024-01-11', '2024-01-18', '2024-01-16');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (3, 4, '2024-01-15', '2024-01-22', '2024-01-20');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (5, 5, '2024-01-17', '2024-01-24', '2024-01-22');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (4, 8, '2024-01-19', '2024-01-26', '2024-01-24');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (3, 10, '2024-01-21', '2024-01-28', '2024-01-26');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (1, 9, '2024-01-27', '2024-02-03', '2024-02-01');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (5, 2, '2024-01-29', '2024-02-05', '2024-02-03');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (4, 6, '2024-01-31', '2024-02-07', '2024-02-05');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (7, 6, '2024-02-01', '2024-02-08', NULL);
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (6, 1, '2024-02-02', '2024-02-09', '2024-02-07');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (8, 4, '2024-02-03', '2024-02-10', '2024-02-08');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (1, 4, '2024-02-04', '2024-02-11', '2024-02-15');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (9, 9, '2024-02-05', '2024-02-12', '2024-02-10');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (2, 7, '2024-02-06', '2024-02-13', '2024-02-11');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (6, 8, '2024-02-08', '2024-02-15', '2024-02-13');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (4, 1, '2024-02-09', '2024-02-16', '2024-02-14');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (8, 2, '2024-02-11', '2024-02-18', '2024-02-16');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (5, 3, '2024-02-12', '2024-02-19', '2024-02-17');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (9, 5, '2024-02-13', '2024-02-20', NULL);
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (3, 5, '2024-02-14', '2024-02-21', '2024-02-19');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (6, 4, '2024-02-15', '2024-02-22', NULL);
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (3, 6, '2024-02-17', '2024-02-24', NULL);
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (1, 10, '2024-02-18', '2024-02-25', '2024-02-23');
INSERT INTO `sistema_noleggio`.`noleggio` (`copia_film`, `cliente`, `noleggio`, `scadenza`, `restituzione`) VALUES (8, 7, '2024-02-21', '2024-02-28', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`telefono`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (1, 18816973);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (1, 496672944);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (2, 56913804);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (3, 74550192);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (3, 212009552);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (4, 96397185);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (5, 575957275);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (6, 33726943);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (6, 80594820);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (6, 775102280);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (7, 23327878);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (8, 195458563);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (9, 37309184);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (10, 48923623);
INSERT INTO `sistema_noleggio`.`telefono` (`cliente`, `telefono`) VALUES (10, 170170234);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`email`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (1, 'mario.rossi@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (2, 'luca.bianchi@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (3, 'giulia.verdi@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (4, 'giovanni.ferrari@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (5, 'anna.neri@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (6, 'laura.silvestri@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (7, 'marco.bianchini@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (8, 'simone.levati@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (9, 'giorgio.simonetti@example.com');
INSERT INTO `sistema_noleggio`.`email` (`cliente`, `email`) VALUES (10, 'roberta.lorusso@example.com');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`cellulare`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (1, 3241074156);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (1, 3537662110);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (2, 3965088108);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (3, 3412454242);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (3, 3867006911);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (4, 3297671860);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (5, 3587338595);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (6, 3143677426);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (6, 3656371368);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (6, 3950824594);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (7, 3885008895);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (8, 3572570724);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (9, 3107826961);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (10, 3383632451);
INSERT INTO `sistema_noleggio`.`cellulare` (`cliente`, `cellulare`) VALUES (10, 3521422661);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sistema_noleggio`.`login`
-- -----------------------------------------------------
START TRANSACTION;
USE `sistema_noleggio`;
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('fabio', 'a53bd0415947807bcb95ceec535820ee', 'LVTHMD02M41G196S');
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('francesco', '0581938f0767a65b373cea80e905c25f', 'CRBRRD15L41B205E');
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('giacomo', 'dcc4ed45e6d3fb1c13044163a464b44a', 'CRNDYN01T01F109U');
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('giulia', 'ded424ec83b23a0eb0820c4c5f9c1df6', 'DPTFWZ64D41C241Z');
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('mario', 'de2f15d014d40b93578d255e6221fd60', 'RTZVLL21E41E664J');
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('proprietario', '19c07c0f7b8308785975843d5e06dfac', NULL);
INSERT INTO `sistema_noleggio`.`login` (`username`, `password`, `impiegato`) VALUES ('sandra', 'f40a37048732da05928c3d374549c832', 'DMITST78B01C336K');

COMMIT;

USE `sistema_noleggio`;

DELIMITER $$

USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`turno_lavoro_check_insert_hours` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`turno_lavoro_check_insert_hours` BEFORE INSERT ON `turno_lavoro` FOR EACH ROW
BEGIN
	IF New.ora_fine <= New.ora_inizio THEN
		SIGNAL SQLSTATE '45000' SET message_text = "L'orario di uscita deve essere maggiore di quello di entrata";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`turno_lavoro_check_update_hours` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`turno_lavoro_check_update_hours` BEFORE UPDATE ON `turno_lavoro` FOR EACH ROW
BEGIN
	IF New.ingresso is not null AND New.uscita <= New.ingresso THEN
		SIGNAL SQLSTATE '45000' SET message_text = "L'orario di uscita deve essere maggiore di  quello di entrata";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`carica_check_date` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`carica_check_date` BEFORE UPDATE ON `carica` FOR EACH ROW
BEGIN

	IF New.fine <= CURDATE() THEN
		SIGNAL SQLSTATE '45000' SET message_text = "La data di fine deve essere maggiore della data odierna";
    END IF;

	IF New.fine <= Old.inizio THEN
		SIGNAL SQLSTATE '45000' SET message_text = "La data di fine deve essere maggiore della data di inizio";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`noleggio_check_date` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`noleggio_check_date` BEFORE INSERT ON `noleggio` FOR EACH ROW
BEGIN
	IF New.scadenza <= New.noleggio THEN
		SIGNAL SQLSTATE '45000' SET message_text = "La data di scadenza deve essere maggiore della data di noleggio";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`noleggio_check_already_in_rental` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`noleggio_check_already_in_rental` BEFORE INSERT ON `noleggio` FOR EACH ROW
BEGIN
	declare var_check TINYINT;
	SELECT count(*) FROM noleggio_corrente WHERE copia_film = New.copia_film INTO var_check;
    if var_check > 0 then
        signal sqlstate '45000' set message_text = 'La copia è attualmente noleggiata';
    end if;
END$$


DELIMITER ;

SET GLOBAL event_scheduler = on;

DELIMITER $$

CREATE EVENT IF NOT EXISTS `sistema_noleggio`.`cleanup_5`
    ON SCHEDULE
        EVERY 1 YEAR
            STARTS CONCAT(extract(year from CURDATE() + INTERVAL 1 year), '-01-01 01:00:00')
    ON COMPLETION PRESERVE
    DO BEGIN
    DELETE FROM `turno_lavoro` WHERE `data` < (CURDATE() - INTERVAL 5 YEAR);
END$$

DELIMITER ;

DELIMITER $$

CREATE EVENT IF NOT EXISTS `sistema_noleggio`.`cleanup_10`
    ON SCHEDULE
        EVERY 1 YEAR
            STARTS CONCAT(extract(year from CURDATE() + INTERVAL 1 year), '-01-01 01:00:00')
    ON COMPLETION PRESERVE
    DO BEGIN
    DELETE FROM `noleggio` WHERE `restituzione` < (CURDATE() - INTERVAL 10 YEAR);
    DELETE FROM `carica` WHERE `fine` < (CURDATE() - INTERVAL 10 YEAR);
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

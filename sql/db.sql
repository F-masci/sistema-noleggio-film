-- MySQL Script generated by MySQL Workbench
-- Tue Feb  6 00:24:07 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema sistema_noleggio
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `sistema_noleggio` ;

-- -----------------------------------------------------
-- Schema sistema_noleggio
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sistema_noleggio` DEFAULT CHARACTER SET utf8 ;
USE `sistema_noleggio` ;

-- -----------------------------------------------------
-- Table `sistema_noleggio`.`impiegato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`impiegato` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`impiegato` (
  `codice_fiscale` CHAR(16) NOT NULL,
  `nome` VARCHAR(50) NOT NULL,
  `recapito` BIGINT(10) ZEROFILL NOT NULL,
  PRIMARY KEY (`codice_fiscale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`turno_lavoro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`turno_lavoro` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`turno_lavoro` (
  `impiegato` CHAR(16) NOT NULL,
  `data` DATE NOT NULL,
  `ora_inizio` TIME NOT NULL,
  `ora_fine` TIME NOT NULL,
  `ingresso` TIME NULL DEFAULT NULL,
  `uscita` TIME NULL DEFAULT NULL,
  PRIMARY KEY (`impiegato`, `data`),
  CONSTRAINT `fk_turno_lavoro_impiegato`
    FOREIGN KEY (`impiegato`)
    REFERENCES `sistema_noleggio`.`impiegato` (`codice_fiscale`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`carica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`carica` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`carica` (
  `impiegato` CHAR(16) NOT NULL,
  `inizio` DATE NOT NULL DEFAULT CURDATE(),
  `fine` DATE NULL DEFAULT NULL,
  `mansione` ENUM('Cassiere', 'Commesso') NOT NULL,
  PRIMARY KEY (`impiegato`, `inizio`),
  CONSTRAINT `fk_carica_impiegato1`
    FOREIGN KEY (`impiegato`)
    REFERENCES `sistema_noleggio`.`impiegato` (`codice_fiscale`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`film` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`film` (
  `titolo` VARCHAR(100) NOT NULL,
  `regista` VARCHAR(50) NOT NULL,
  `anno` YEAR NOT NULL,
  `costo_dvd` FLOAT NOT NULL,
  `costo_videocassetta` FLOAT NOT NULL,
  `originale_titolo` VARCHAR(100) NULL,
  `originale_regista` VARCHAR(50) NULL,
  PRIMARY KEY (`titolo`, `regista`),
  INDEX `fk_film_film1_idx` (`originale_titolo` ASC, `originale_regista` ASC) VISIBLE,
  CONSTRAINT `fk_film_film1`
    FOREIGN KEY (`originale_titolo` , `originale_regista`)
    REFERENCES `sistema_noleggio`.`film` (`titolo` , `regista`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`cast_film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`cast_film` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`cast_film` (
  `attore_nome` VARCHAR(50) NOT NULL,
  `attore_cognome` VARCHAR(50) NOT NULL,
  `film_titolo` VARCHAR(100) NOT NULL,
  `film_regista` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`attore_nome`, `attore_cognome`, `film_titolo`, `film_regista`),
  INDEX `fk_cast_film1_idx` (`film_titolo` ASC, `film_regista` ASC) VISIBLE,
  CONSTRAINT `fk_cast_film1`
    FOREIGN KEY (`film_titolo` , `film_regista`)
    REFERENCES `sistema_noleggio`.`film` (`titolo` , `regista`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`settore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`settore` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`settore` (
  `codice` INT NOT NULL,
  PRIMARY KEY (`codice`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`copia_film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`copia_film` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`copia_film` (
  `codice` INT NOT NULL,
  `titolo` VARCHAR(100) NOT NULL,
  `regista` VARCHAR(50) NOT NULL,
  `tipo` ENUM('DVD', 'Videocassetta') NOT NULL,
  `settore` INT NOT NULL,
  `posizione` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`codice`),
  INDEX `fk_copia_film_settore1_idx` (`settore` ASC) VISIBLE,
  CONSTRAINT `fk_copia_film_film1`
    FOREIGN KEY (`titolo` , `regista`)
    REFERENCES `sistema_noleggio`.`film` (`titolo` , `regista`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_copia_film_settore1`
    FOREIGN KEY (`settore`)
    REFERENCES `sistema_noleggio`.`settore` (`codice`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`cliente` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`cliente` (
  `tessera` INT NOT NULL AUTO_INCREMENT,
  `codice_fiscale` CHAR(16) NOT NULL,
  `nome` VARCHAR(50) NOT NULL,
  `cognome` VARCHAR(50) NOT NULL,
  `data_nascita` DATE NOT NULL,
  `indirizzo_via` VARCHAR(100) NOT NULL,
  `indirizzo_cap` INT(5) ZEROFILL NOT NULL,
  `indirizzo_civico` INT NOT NULL,
  PRIMARY KEY (`tessera`),
  UNIQUE INDEX `codice_fiscale_UNIQUE` (`codice_fiscale` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`noleggio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`noleggio` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`noleggio` (
  `copia_film` INT NOT NULL,
  `cliente` INT NOT NULL,
  `noleggio` DATE NOT NULL DEFAULT CURDATE(),
  `scadenza` DATE NOT NULL,
  `restituzione` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`copia_film`, `cliente`, `noleggio`),
  INDEX `fk_noleggio_cliente1_idx` (`cliente` ASC) VISIBLE,
  INDEX `fk_noleggio_copia_film1_idx` (`copia_film` ASC) VISIBLE,
  CONSTRAINT `fk_noleggio_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_noleggio_copia_film1`
    FOREIGN KEY (`copia_film`)
    REFERENCES `sistema_noleggio`.`copia_film` (`codice`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`telefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`telefono` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`telefono` (
  `telefono` BIGINT(10) ZEROFILL NOT NULL,
  `cliente` INT NOT NULL,
  PRIMARY KEY (`telefono`, `cliente`),
  INDEX `fk_telefono_cliente1_idx` (`cliente` ASC) VISIBLE,
  CONSTRAINT `fk_telefono_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`email`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`email` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`email` (
  `email` VARCHAR(100) NOT NULL,
  `cliente` INT NOT NULL,
  PRIMARY KEY (`email`, `cliente`),
  INDEX `fk_email_cliente1_idx` (`cliente` ASC) VISIBLE,
  CONSTRAINT `fk_email_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`cellulare`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`cellulare` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`cellulare` (
  `cellulare` BIGINT(10) ZEROFILL NOT NULL,
  `cliente` INT NOT NULL,
  PRIMARY KEY (`cellulare`, `cliente`),
  INDEX `fk_cellulare_cliente1_idx` (`cliente` ASC) VISIBLE,
  CONSTRAINT `fk_cellulare_cliente1`
    FOREIGN KEY (`cliente`)
    REFERENCES `sistema_noleggio`.`cliente` (`tessera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_noleggio`.`login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistema_noleggio`.`login` ;

CREATE TABLE IF NOT EXISTS `sistema_noleggio`.`login` (
  `username` VARCHAR(100) NOT NULL,
  `password` CHAR(32) NOT NULL,
  `impiegato` CHAR(16) NULL,
  PRIMARY KEY (`username`),
  INDEX `fk_login_impiegato1_idx` (`impiegato` ASC) VISIBLE,
  CONSTRAINT `fk_login_impiegato1`
    FOREIGN KEY (`impiegato`)
    REFERENCES `sistema_noleggio`.`impiegato` (`codice_fiscale`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `sistema_noleggio` ;

-- -----------------------------------------------------
-- procedure _inserisciRecapitiCliente
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`_inserisciRecapitiCliente`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `_inserisciRecapitiCliente` (in var_client INT, in var_mobile_phones TEXT, in var_emails TEXT, in var_phones TEXT, out var_affected_rows INT)
begin

    -- La variabile var_mobile_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri di cellulare del cliente
    -- La variabile var_emails contiene un elenco del tipo xxx@xx;xxx@xxx;....; -> indirizzi email del cliente
    -- La variabile var_phones contiene un elenco del tipo 0000000000;0000000000;....; -> numeri fissi del cliente

    declare var_counter INT;
    declare var_aux TEXT;

    set var_affected_rows = 0;

    -- CELLULARE

    set var_counter = 1;
    insert_mobile_phones_loop: loop
        set var_aux = tokenize_string_list(var_mobile_phones, ';', var_counter);
        if var_aux = ''
        then
            leave insert_mobile_phones_loop;
        end if;
        INSERT INTO cellulare(cellulare, cliente) VALUES (var_aux, var_client);
        set var_affected_rows = var_affected_rows+1;
        set var_counter = var_counter+1;
    end loop;

    -- EMAIL

    set var_counter = 1;
    insert_emails_loop: loop
        set var_aux = tokenize_string_list(var_emails, ';', var_counter);
        if var_aux = ''
        then
            leave insert_emails_loop;
        end if;
        INSERT INTO email(email, cliente) VALUES (var_aux, var_client);
        set var_affected_rows = var_affected_rows+1;
        set var_counter = var_counter+1;
    end loop;

    -- TELEFONO

    set var_counter = 1;
    insert_phones_loop: loop
        set var_aux = tokenize_string_list(var_phones, ';', var_counter);
        if var_aux = ''
        then
            leave insert_phones_loop;
        end if;
        INSERT INTO telefono(telefono, cliente) VALUES (var_aux, var_client);
        set var_affected_rows = var_affected_rows+1;
        set var_counter = var_counter+1;
    end loop;

end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserisciCopiaFilm
-- -----------------------------------------------------

USE `sistema_noleggio`;
DROP procedure IF EXISTS `sistema_noleggio`.`inserisciCopiaFilm`;

DELIMITER $$
USE `sistema_noleggio`$$
CREATE PROCEDURE `inserisciCopiaFilm` (in var_code INT, in var_title VARCHAR(100), in var_director VARCHAR(50), in var_type ENUM('DVD', 'Videocassetta'), in var_sector INT, in var_position VARCHAR(100))
begin
    INSERT INTO copia_film(codice, titolo, regista, tipo, settore, posizione) VALUES(var_code, var_title, var_director, var_type, var_sector, var_position);
end$$

DELIMITER ;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`carica_attuale`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`carica_attuale` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `carica_attuale` AS
SELECT * FROM carica WHERE (fine IS NULL AND DATE(NOW()) >= inizio) OR (DATE(NOW()) BETWEEN inizio AND fine);

-- -----------------------------------------------------
-- View `sistema_noleggio`.`turno_iniziato`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`turno_iniziato` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `turno_iniziato` AS
SELECT * FROM turno_lavoro WHERE ingresso IS NOT NULL AND uscita IS NULL;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`turno_terminato`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`turno_terminato` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `turno_terminato` AS
SELECT * FROM turno_lavoro WHERE uscita IS NOT NULL;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`noleggio_corrente`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`noleggio_corrente` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `noleggio_corrente` AS
SELECT * FROM noleggio WHERE restituzione IS NULL;

-- -----------------------------------------------------
-- View `sistema_noleggio`.`noleggio_scaduto`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `sistema_noleggio`.`noleggio_scaduto` ;
USE `sistema_noleggio`;
CREATE  OR REPLACE VIEW `noleggio_scaduto` AS
SELECT * FROM noleggio_corrente WHERE scadenza <= CURDATE();
USE `sistema_noleggio`;

DELIMITER $$

USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`turno_lavoro_check_insert_hours` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`turno_lavoro_check_insert_hours` BEFORE INSERT ON `turno_lavoro` FOR EACH ROW
BEGIN
	IF New.ora_fine <= New.ora_inizio THEN
		SIGNAL SQLSTATE '45000' SET message_text = "L'orario di uscita deve essere maggiore di quello di entrata";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`turno_lavoro_check_update_hours` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`turno_lavoro_check_update_hours` BEFORE UPDATE ON `turno_lavoro` FOR EACH ROW
BEGIN
	IF New.ingresso is not null AND New.uscita <= New.ingresso THEN
		SIGNAL SQLSTATE '45000' SET message_text = "L'orario di uscita deve essere maggiore di  quello di entrata";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`carica_check_date` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`carica_check_date` BEFORE UPDATE ON `carica` FOR EACH ROW
BEGIN
	IF New.fine <= Old.inizio THEN
		SIGNAL SQLSTATE '45000' SET message_text = "La data di fine deve essere maggiore della data di inizio";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`noleggio_check_date` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`noleggio_check_date` BEFORE INSERT ON `noleggio` FOR EACH ROW
BEGIN
	IF New.scadenza <= CURDATE() THEN
		SIGNAL SQLSTATE '45000' SET message_text = "La data di scadenza deve essere maggiore della data di noleggio";
    END IF;
END$$


USE `sistema_noleggio`$$
DROP TRIGGER IF EXISTS `sistema_noleggio`.`noleggio_check_already_in_rental` $$
USE `sistema_noleggio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sistema_noleggio`.`noleggio_check_already_in_rental` BEFORE INSERT ON `noleggio` FOR EACH ROW
BEGIN
	declare var_check TINYINT;
	SELECT count(*) FROM noleggio_corrente WHERE copia_film = New.copia_film INTO var_check;
    if var_check > 0 then
        signal sqlstate '45000' set message_text = 'La copia è attualmente noleggiata';
    end if;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS sn_cassiere;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_cassiere' IDENTIFIED BY 'noleggio_cassiere';

SET SQL_MODE = '';
DROP USER IF EXISTS sn_proprietario;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_proprietario' IDENTIFIED BY 'sn_proprietario';

GRANT EXECUTE ON procedure `sistema_noleggio`.`inserisciCopiaFilm` TO 'sn_proprietario';
SET SQL_MODE = '';
DROP USER IF EXISTS sn_impiegato;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_impiegato' IDENTIFIED BY 'noleggio_impiegato';

SET SQL_MODE = '';
DROP USER IF EXISTS sn_login;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'sn_login' IDENTIFIED BY 'noleggio_login';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
